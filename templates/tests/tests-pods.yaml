apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-produce-consume-test"
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  containers:
  - name: {{ .Release.Name }}-test
    image: "{{ .Values.kafka.image }}"
    imagePullPolicy: "{{ .Values.kafka.imagePullPolicy }}"
    command:
    - sh
    - -c
    - |
      # Delete the topic if it exists
      kafka-topics --zookeeper zoo1:{{ .Values.zookeeper.port }} --topic {{ template "ksql-kafka-stack.fullname" . }}-test-topic --delete --if-exists
      # Create the topic
      kafka-topics --zookeeper zoo1:{{ .Values.zookeeper.port }} --topic {{ template "ksql-kafka-stack.fullname" . }}-test-topic --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list kafka-service-ext:{{ .Values.kafka.port }} --topic {{ template "ksql-kafka-stack.fullname" . }}-test-topic && \
      # Consume a test message from the topic
      echo "* Consume message..." && \
      kafka-console-consumer --bootstrap-server kafka-service-ext:{{ .Values.kafka.port }} --topic {{ template "ksql-kafka-stack.fullname" . }}-test-topic --from-beginning --timeout-ms 5000 | grep "$MESSAGE"
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: datagen-test
  labels:
    app: datagen
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  containers:
    - name: test
      resources: {}
      image: confluentinc/ksql-examples:5.3.1
      command:
        - bash
        - -c
        - |
          ksql-datagen \
                bootstrap-server=kafka-service-ext:9094 \
                quickstart=pageviews \
                format=delimited \
                topic=pageviews \
                maxInterval=500 \
                iterations=50 && \
          ksql-datagen \
                bootstrap-server=kafka-service-ext:9094 \
                quickstart=users \
                format=json \
                topic=users \
                maxInterval=100 \
                iterations=50
  restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: queries-config
  labels:
    k8s-app: kafka
data:
  queries.sql: |-
    -- From http://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#create-a-stream-and-table

    -- Create a stream pageviews_original from the Kafka topic pageviews, specifying the value_format of DELIMITED
    CREATE STREAM pageviews_original (viewtime bigint, userid varchar, pageid varchar) WITH (kafka_topic='pageviews', value_format='DELIMITED');

    -- Create a table users_original from the Kafka topic users, specifying the value_format of JSON
    CREATE TABLE users_original (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR) WITH (kafka_topic='users', value_format='JSON', key = 'userid');

    -- Create a persistent query by using the CREATE STREAM keywords to precede the SELECT statement
    CREATE STREAM pageviews_enriched AS SELECT users_original.userid AS userid, pageid, regionid, gender FROM pageviews_original LEFT JOIN users_original ON pageviews_original.userid = users_original.userid;

    -- Create a new persistent query where a condition limits the streams content, using WHERE
    CREATE STREAM pageviews_female AS SELECT * FROM pageviews_enriched WHERE gender = 'FEMALE';

    -- Create a new persistent query where another condition is met, using LIKE
    CREATE STREAM pageviews_female_like_89 WITH (kafka_topic='pageviews_enriched_r8_r9') AS SELECT * FROM pageviews_female WHERE regionid LIKE '%_8' OR regionid LIKE '%_9';

    -- Create a new persistent query that counts the pageviews for each region and gender combination in a tumbling window of 30 seconds when the count is greater than one
    CREATE TABLE pageviews_regions WITH (VALUE_FORMAT='avro') AS SELECT gender, regionid , COUNT(*) AS numusers FROM pageviews_enriched WINDOW TUMBLING (size 30 second) GROUP BY gender, regionid HAVING COUNT(*) > 1;
---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-ksql-test"
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  containers:
  - name: {{ .Release.Name }}-test
    image: "{{ .Values.ksqlserver.image }}"
    imagePullPolicy: "{{ .Values.kafka.imagePullPolicy }}"
    command:
    - sh
    - -c
    - |
      cat /etc/ksql/queries/queries.sql | ksql -- http://ksqlserver:{{ .Values.ksqlserver.port }}
    volumeMounts:
      - name: queries
        mountPath: /etc/ksql/queries
  volumes:
    - name: "queries"
      configMap:
        name: queries-config
  restartPolicy: Never
